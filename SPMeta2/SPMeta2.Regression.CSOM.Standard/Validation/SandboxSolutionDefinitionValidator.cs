using System;
using Microsoft.SharePoint.Client;
using SPMeta2.CSOM.Extensions;
using SPMeta2.CSOM.ModelHosts;
using SPMeta2.CSOM.Standard.ModelHandlers;
using SPMeta2.CSOM.Standard.ModelHandlers.Taxonomy;
using SPMeta2.CSOM.Standard.ModelHosts;
using SPMeta2.Definitions;
using SPMeta2.Definitions.Base;
using SPMeta2.Regression.CSOM.Standard.Extensions;
using SPMeta2.Standard.Definitions;
using SPMeta2.Standard.Definitions.Taxonomy;
using SPMeta2.Utils;

namespace SPMeta2.Regression.CSOM.Standard.Validation
{
    public class SandboxSolutionDefinitionValidator : SandboxSolutionModelHandler
    {
        public override void DeployModel(object modelHost, DefinitionBase model)
        {
            var siteModelHost = modelHost.WithAssertAndCast<SiteModelHost>("modelHost", value => value.RequireNotNull());
            var definition = model.WithAssertAndCast<SandboxSolutionDefinition>("model", value => value.RequireNotNull());

            var spObject = this.FindExistingSolution(siteModelHost, definition);
            var context = spObject.Context;

            var fileItem = spObject.ListItemAllFields;
            context.Load(fileItem);
            context.ExecuteQueryWithTrace();

            var assert = ServiceFactory.AssertService.NewAssert(definition, fileItem);

            assert
                .ShouldNotBeNull(fileItem)

                .ShouldBeEqual(d => d.Activate, o => o.GetSolutionActivationStatus())
                .ShouldBeEqual(d => d.SolutionId, o => o.GetSolutionId())

                .SkipProperty(d => d.Content, "Content is fine.")
                .SkipProperty(d => d.FileName, "Randomly generated by CSOM activation.");
        }
    }
}
