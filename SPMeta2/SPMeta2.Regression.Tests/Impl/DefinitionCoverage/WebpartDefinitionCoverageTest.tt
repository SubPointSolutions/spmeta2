<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)..\SPMeta2\bin\Debug\SPMeta2.dll" #>
<#@ assembly name="$(ProjectDir)..\SPMeta2.Standard\bin\Debug\SPMeta2.Standard.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="SPMeta2.Utils" #>
<#@ import namespace="SPMeta2.Definitions" #>
<#@ import namespace="SPMeta2.Standard.Definitions.Taxonomy" #>
<#@ import namespace="SPMeta2.Standard.Definitions.Fields" #>
<#@ import namespace="SPMeta2.Definitions.Base" #>
<#@ import namespace="SPMeta2.Definitions.Webparts" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using SPMeta2.BuiltInDefinitions;
using SPMeta2.Containers;
using SPMeta2.Containers.Standard;
using SPMeta2.Definitions;
using SPMeta2.Definitions.Base;
using SPMeta2.Definitions.Webparts;
using SPMeta2.Regression.Tests.Impl.Scenarios.Base;
using SPMeta2.Standard.Services.Webparts;
using SPMeta2.Syntax.Default;
using SPMeta2.Standard.Definitions.Webparts;
using SPMeta2.Enumerations;
using SPMeta2.Regression.Definitions;
using SPMeta2.Standard.Definitions;
using SPMeta2.Standard.Enumerations;
using SPMeta2.Containers.Extensions;
using SPMeta2.Containers.Services;
using SPMeta2.Extensions;
using SPMeta2.Models;
using SPMeta2.Regression.Definitions.Extended;
using SPMeta2.Attributes.Regression;

namespace SPMeta2.Regression.Tests.Impl.DefinitionCoverage
{
    [TestClass]
    public class WebpartDefinitionCoverageTest : SPMeta2RegresionScenarioTestBase
    {
        #region internal

        [ClassInitializeAttribute]
        public static void Init(TestContext context)
        {
            InternalInit();
        }

        [ClassCleanupAttribute]
        public static void Cleanup()
        {
            InternalCleanup();
        }

        #endregion

		#region internal

		public static bool UseWikiPages = true;
		public static bool UseWebPartPages = true;
		public static bool UsePublishingPages = true;

		public static bool UseListPages = true;
		public static bool UseLibraryPages = true;

		public static bool UseSubWebs = true;

		public static bool UseApps = false;

		#endregion

        #region pre-generated tests
 <#

	var allDefinitions = ReflectionUtils.GetTypesFromAssemblies<DefinitionBase>(new[]
            {
                typeof(DefinitionBase).Assembly,
				typeof(TaxonomyFieldDefinition).Assembly
            });

	foreach(var definitionType in allDefinitions.Where(t => t.IsSubclassOf(typeof(WebPartDefinitionBase))) ) {
		
		#>

		[TestMethod]
        [TestCategory("Regression.DefinitionCoverage.WebpartDefinitions")]
		[SiteCollectionIsolation]
        public void CanDeploy_<# Write(definitionType.Name); #>_To_AllPageTypes() 
        {
            DeployWebpartOnSupportedHosts<<# Write(definitionType.Name); #>>();
        }
		<#
	}
 #>
       
	    #endregion

    #region utils

        private void DeployWebpartOnSupportedHosts<TWebpartType>()
            where TWebpartType : WebPartDefinitionBase, new()
        {
            var siteModel = SPMeta2Model.NewSiteModel(site =>
            {
                site.AddSiteFeature(BuiltInSiteFeatures.SharePointServerPublishingInfrastructure.Inherit(def =>
                {
                    def.Enable = true;
					def.ForceActivate = true;
                }));

                site.AddSiteFeature(BuiltInSiteFeatures.EnableAppSideLoading.Inherit(def =>
                {
                    def.Enable = true;
					def.ForceActivate = true;
                }));
            });

            var model = SPMeta2Model.NewWebModel(web =>
            {
				web.AddWebFeature(BuiltInWebFeatures.SharePointServerPublishing.Inherit(def =>
                {
                    def.Enable = true;
					def.ForceActivate = true;
                }));

				web.AddWebFeature(BuiltInWebFeatures.WikiPageHomePage.Inherit(def =>
                {
                    def.Enable = true;
					def.ForceActivate = true;
                }));

                // always deploy to root web 
                FillWebWithTheTestwebPartSuite<TWebpartType>(web);

				if(UseSubWebs) {
					// and then sub web too
					web.AddRandomWeb(subWeb =>
					{
						subWeb.AddWebFeature(BuiltInWebFeatures.SharePointServerPublishing.Inherit(def =>
						{
							def.Enable = true;
							def.ForceActivate = true;
						}));

						subWeb.AddWebFeature(BuiltInWebFeatures.WikiPageHomePage.Inherit(def =>
						{
							def.Enable = true;
							def.ForceActivate = true;
						}));

						FillWebWithTheTestwebPartSuite<TWebpartType>(subWeb);
					});
				}
            });

            WithDisabledPropertyUpdateValidation(() =>
            {
                TestModel(siteModel, model);
            });
        }

        protected bool ShoudValidatePresenceOnListViews(WebPartDefinitionBase webPartDefinition)
        {
            var result = true;

            // Investigate 'ListViewWebPartDefinition' provision specifics on list views #646
            // https://github.com/SubPointSolutions/spmeta2/issues/646
            if (webPartDefinition is ListViewWebPartDefinition)
            {
                result = false;
            }

            return result;
        }

        protected bool ShoudValidatePresenceOnLibraryViews(WebPartDefinitionBase webPartDefinition)
        {
            var result = true;

            // Investigate 'ListViewWebPartDefinition' provision specifics on list views #646
            // https://github.com/SubPointSolutions/spmeta2/issues/646
            if (webPartDefinition is ListViewWebPartDefinition)
            {
                result = false;
            }

            return result;
        }

        protected virtual void FillWebWithTheTestwebPartSuite<TWebpartType>(WebModelNode currentWeb)
            where TWebpartType : WebPartDefinitionBase, new()
        {
            var initialDef = ModelGeneratorService.GetRandomDefinition(typeof(TWebpartType)) as TWebpartType;

            var wikiWebPartDef = initialDef.Clone<TWebpartType>();
            var webpartPageWebPartDef = initialDef.Clone<TWebpartType>();
			var publishingPageWebPartDef = initialDef.Clone<TWebpartType>();

			// Some web part provision on wiki page give empty markup #693
			// https://github.com/SubPointSolutions/spmeta2/issues/693
			var webpartPageWebPartAddToPageContentDef1 = initialDef.Clone<TWebpartType>();

			webpartPageWebPartAddToPageContentDef1.Title = Rnd.String();
			webpartPageWebPartAddToPageContentDef1.Id = "g_" + Guid.NewGuid().ToString("D").Replace('-', '_');
			webpartPageWebPartAddToPageContentDef1.ZoneId = "wpz";
			webpartPageWebPartAddToPageContentDef1.AddToPageContent = true;

			var webpartPageWebPartAddToPageContentDef2 = initialDef.Clone<TWebpartType>();

			webpartPageWebPartAddToPageContentDef2.Title = Rnd.String();
			webpartPageWebPartAddToPageContentDef2.Id = "g_" + Guid.NewGuid().ToString("D").Replace('-', '_');
			webpartPageWebPartAddToPageContentDef2.ZoneId = "wpz";
			webpartPageWebPartAddToPageContentDef2.AddToPageContent = true;

            var listWebPartDef = initialDef.Clone<TWebpartType>();
            var docWebPartDef = initialDef.Clone<TWebpartType>();

			if(UseApps) {
				// ensure for the client web part
				currentWeb.AddRandomApp();
			}

            currentWeb
                /// for the Pages lib & pubnlishing pages
                .AddWebFeature(BuiltInWebFeatures.SharePointServerPublishing.Inherit(def =>
                {
                    def.Enable = true;
					def.ForceActivate = true;
                }))

                .AddHostList(BuiltInListDefinitions.SitePages, list =>
                {
                    var webpartPageName = string.Empty;
                    var wikiPageName = string.Empty;
					var wikiPageNameAddToPageContent = string.Empty;

					if(UseWikiPages) {
						list
							// 1 - wiki pages
							.AddRandomWikiPage(page =>
							{
								wikiPageName = (page.Value as WikiPageDefinition).FileName;
								page.AddDefinitionNode(wikiWebPartDef);
							});

						ValidateWebPartPresenceForPage(list, wikiPageName, wikiWebPartDef);
					}

					if(UseWebPartPages) {
						list
							// 2- web part pages
							.AddRandomWebPartPage(page =>
							{
								webpartPageName = (page.Value as WebPartPageDefinition).FileName;
								page.AddDefinitionNode(webpartPageWebPartDef);
							});

						ValidateWebPartPresenceForPage(list, webpartPageName, webpartPageWebPartDef);
					}

					if(UseWikiPages) {
						list
							/// 3- adding to the web part page as .AddToPageContent
							.AddRandomWikiPage(page =>
							{
								page.RegExcludeFromValidation();

								wikiPageNameAddToPageContent = (page.Value as WikiPageDefinition).FileName;
                            
								page.AddDefinitionNode(webpartPageWebPartAddToPageContentDef1);
								page.AddDefinitionNode(webpartPageWebPartAddToPageContentDef2);
							});

						ValidateWebPartPresenceForPage(list, wikiPageNameAddToPageContent, webpartPageWebPartAddToPageContentDef1);
						ValidateWebPartPresenceForPage(list, wikiPageNameAddToPageContent, webpartPageWebPartAddToPageContentDef2);
					}
                });

	            // 3 - publishing pages
               currentWeb.AddHostList(BuiltInListDefinitions.Pages, list =>
                {
                    var publishingPageName = string.Empty;

					if(UsePublishingPages) {			
					
						list
							.AddRandomPublishingPage(page =>
							{
								(page.Value as PublishingPageDefinition).PageLayoutFileName =
									BuiltInPublishingPageLayoutNames.BlankWebPartPage;
								publishingPageName = (page.Value as PublishingPageDefinition).FileName;

								page.AddDefinitionNode(publishingPageWebPartDef);
							});

						ValidateWebPartPresenceForPage(list, publishingPageName, publishingPageWebPartDef);
					}
                });

				if(UseListPages) {
					// 4 - list related routines - OOTB views, custom views & forms
					currentWeb.AddRandomList(list =>
					{
						// OOTB view
						list.AddHostListView(BuiltInListViewDefinitions.Lists.AllItems, listView =>
						{
							listView.AddDefinitionNode(listWebPartDef.Inherit());
						});

						if (ShoudValidatePresenceOnListViews(initialDef))
							ValidateWebPartPresenceForPage(list, BuiltInListViewDefinitions.Lists.AllItems.Url, listWebPartDef);

						// custom view
						var customView = ModelGeneratorService.GetRandomDefinition<ListViewDefinition>(def =>
						{
							def.Url = Rnd.AspxFileName();
						});

						list.AddListView(customView, listView =>
						{
							listView.AddDefinitionNode(listWebPartDef.Inherit());
						});

						if (ShoudValidatePresenceOnListViews(initialDef))
							ValidateWebPartPresenceForPage(list, customView.Url, listWebPartDef);

						// OOTB forms, new - edit - view
						list.AddHostListView(BuiltInListViewDefinitions.Lists.NewForm, listView =>
						{
							listView.AddDefinitionNode(listWebPartDef.Inherit());
						});

						ValidateWebPartPresenceForPage(list, BuiltInListViewDefinitions.Lists.NewForm.Url, listWebPartDef);

						list.AddHostListView(BuiltInListViewDefinitions.Lists.EditForm, listView =>
						{
							listView.AddDefinitionNode(listWebPartDef.Inherit());
						});


						ValidateWebPartPresenceForPage(list, BuiltInListViewDefinitions.Lists.EditForm.Url, listWebPartDef);

						list.AddHostListView(BuiltInListViewDefinitions.Lists.DispForm, listView =>
						{
							listView.AddDefinitionNode(listWebPartDef.Inherit());
						});


						ValidateWebPartPresenceForPage(list, BuiltInListViewDefinitions.Lists.DispForm.Url, listWebPartDef);
					});
				}

				if(UseLibraryPages) {
					// 5 - OOTB list view form on the library
					currentWeb.AddRandomDocumentLibrary(list =>
					{
						// OOTB view

						list.AddHostListView(BuiltInListViewDefinitions.Libraries.AllItems, listView =>
						{
							listView.AddDefinitionNode(docWebPartDef.Inherit());
						});

						if (ShoudValidatePresenceOnLibraryViews(initialDef))
							ValidateWebPartPresenceForPage(list, "Forms/" + BuiltInListViewDefinitions.Libraries.AllItems.Url, docWebPartDef);

						// custom view
						var customView = ModelGeneratorService.GetRandomDefinition<ListViewDefinition>(def =>
						{
							def.Url = Rnd.AspxFileName();
						});

						list.AddListView(customView, listView =>
						{
							listView.AddDefinitionNode(docWebPartDef.Inherit());
						});

						if (ShoudValidatePresenceOnLibraryViews(initialDef))
							ValidateWebPartPresenceForPage(list, "Forms/" + customView.Url, docWebPartDef);

						// OOTB new - edit - view forms
						// upload, NOPE!
						//list.AddHostListView(BuiltInListViewDefinitions.Libraries.Upload, listView =>
						//{
						//    listView.AddDefinitionNode(docWebPartDef.Inherit());
						//});

						//ValidateWebPartPresenceForPage(list, "Forms/" + BuiltInListViewDefinitions.Libraries.Upload.Url, docWebPartDef);

						list.AddHostListView(BuiltInListViewDefinitions.Libraries.EditForm, listView =>
						{
							listView.AddDefinitionNode(docWebPartDef.Inherit());
						});

						ValidateWebPartPresenceForPage(list, "Forms/" + BuiltInListViewDefinitions.Libraries.EditForm.Url, docWebPartDef);

						list.AddHostListView(BuiltInListViewDefinitions.Libraries.DispForm, listView =>
						{
							listView.AddDefinitionNode(docWebPartDef.Inherit());
						});

						ValidateWebPartPresenceForPage(list, "Forms/" + BuiltInListViewDefinitions.Libraries.DispForm.Url, docWebPartDef);
					});
				}
            ;

            // all web parts chrom
            currentWeb.WithNodesOfType<WebPartDefinitionBase>(node =>
            {
                var wp = node.Value as WebPartDefinitionBase;

                wp.ChromeType = BuiltInPartChromeType.TitleAndBorder;
                wp.ChromeState = BuiltInPartChromeState.Normal;
            });
        }

        protected void ValidateWebPartPresenceForPage(ModelNode list, string pageName, WebPartDefinitionBase wp)
        {
            ValidateWebPartPresenceForPage(list, pageName, new[] { wp });
        }

        protected void ValidateWebPartPresenceForPage(ModelNode list, string pageName,
            IEnumerable<WebPartDefinitionBase> wps)
        {
            list.AddDefinitionNode(new WebpartPresenceOnPageDefinition
            {
                PageFileName = pageName,
                WebPartDefinitions = new List<WebPartDefinitionBase>(wps)
            }, def =>
            {
                def.RegExcludeFromEventsValidation();
            });
        }

        #endregion
    }

}
